diff --git a/Makefile b/Makefile
index 09d790c..132680a 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/defs.h b/defs.h
index 82fb982..cf093c0 100644
--- a/defs.h
+++ b/defs.h
@@ -120,6 +120,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void		set_prior(int);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..92b825d 100644
--- a/proc.c
+++ b/proc.c
@@ -88,7 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->priorVal = 15;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -311,6 +311,14 @@ wait(void)
   }
 }
 
+void
+set_prior(int prior_lvl)
+{
+	struct proc *curproc = myproc();
+	curproc->priorVal = prior_lvl;
+	yield();
+}
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -325,17 +333,31 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+  int highestPrio; 
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    highestPrio = 32;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      if(p->priorVal < highestPrio){
+	highestPrio = p->priorVal;
+      }
+    } 
+    for(p = ptable.proc; p< &ptable.proc[NPROC]; p++){
+    	if(p->state != RUNNABLE)
+		continue;
+	if(p->priorVal != highestPrio && p->priorVal > 0){
+	  p->priorVal = p->priorVal - 1; //increase priority
+	  continue;
+	}
+	else if(p->priorVal == highestPrio && p->priorVal < 32){
+	  p->priorVal = p->priorVal + 1; //decrease priority
+  	}
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
diff --git a/proc.h b/proc.h
index 1647114..ccf9cf7 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priorVal;			//0 highest, 31 lowest priority
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..300d6f8 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_set_prior(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_set_prior]   sys_set_prior,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..a5119ca 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_set_prior   22
diff --git a/sysproc.c b/sysproc.c
index 0686d29..60ff27c 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -27,6 +27,16 @@ sys_wait(void)
 }
 
 int
+sys_set_prior(void)
+{
+	int prio;
+	if(argint(0,  &prio) < 0)
+		return -1;
+	set_prior(prio);
+	return 0;
+}
+
+int
 sys_kill(void)
 {
   int pid;
diff --git a/user.h b/user.h
index 4f99c52..5b000c0 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void set_prior(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..4a4e709 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(set_prior)
